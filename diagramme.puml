@startuml DiagrammeUML
top to bottom direction

' Configuration graphique
skinparam classAttributeIconSize 0

' ===== Classes Principales =====

class Map {
    +Map(path: string)
    +LoadTextures()
    +LoadMap(path: string)
    +DrawMap(renderer: SDL_Renderer*)
    +getColliders(): vector<SDL_Rect>
    -mapData: vector<vector<int>>
    -colliders: vector<SDL_Rect>
}

class GameManager {
    +GameManager(title, width, height, fullscreen)
    +handleEvents()
    +update()
    +render()
    +clean()
    +createPlayers()
    +homeMenu()
    +initGame()
    +pause()
    +endOfRound()
    +startNewRound()
    -window: SDL_Window*
    -renderer: SDL_Renderer*
    -event: SDL_Event
    +assets : AssetManager*
    +entitiesManager : EntitiesManager
    +cardsManager : CardsManager
    +soundManager : SoundManager*
    -player1, player2: Entity*
    -nbWinsPlayer: map<string, int>
    -...
}

class AssetManager {
    +LoadTexture(fileName: const char*): SDL_Texture*
    +AddTexture(id: string, path: const char*)
    +GetTexture(id: string): SDL_Texture*
    +AddFont(id: string, path: string, fontSize: int)
    +GetFont(id: string): TTF_Font*
    +AddTxt(txt: string, font: TTF_Font*, color: SDL_Color, destRect: SDL_Rect*, scale: float): SDL_Texture*
    -textures: map<string, SDL_Texture*>
    -fonts: map<string, TTF_Font*>
}

class EntitiesManager {
    +addEntity(e: Entity*)
    +refresh()
    +update()
    +draw()
    +reset()
    -entities: vector<Entity*>
}

class SoundManager {
  -soundEffects std::map<std::string, Mix_Chunk*>
  -musicTracks std::map<std::string, Mix_Music*>
  +loadSoundEffect(const std::string& id, const std::string& file, int volume = MIX_MAX_VOLUME)
  +loadMusic(const std::string& id, const std::string& file, int volume = MIX_MAX_VOLUME)
  +playSoundEffect(const std::string& id, int loops = 0)
  +playMusic(const std::string& id, int loops = -1)
}

class CardsManager {
    +init()
    +initBonus()
    +initBonusPlayer(playerId: string)
    +choseCard()
    +displayPlayerCards(playerId: string, selected: bool)
    +changeCard(playerId: string, destRect: SDL_Rect&, angle: double&, side: int)
    +select(playerId: string)
    -bonusInitialized: bool
    -bonusPlayer: map<string, vector<vector<Bonus>>>
    -selectedBonusIndexes: map<string, vector<array<int,2>>>
    -txtTextures, txtDestRects: map<string, vector<SDL_Texture*> / SDL_Rect>
    -...
}

class Bonus {
    +Bonus(label: string, nbUses: int, apply: function)
    +applyBonus()
    <<static>> -player: Entity*
    +label: string
    +nbUses: int
    -f: function
}

class Entity {
    +getComponent<T>()
    +addComponent(...)
    +destroy()
    -label: string
    -playerId: string
}

' ===== Composants =====

class Component {
  +Entity* entity;

	+init()
	+update()
	+draw()
  +reset()
	+~Component()
}

class UILabelComponent {
  +SDL_Rect destRect
  +SDL_Color color
  +setText()
  +setPosition()
  +SDL_DestroyTexture()
  +SDL_FreeSurface()
  +SDL_RenderCopy()
}

class TransformComponent {
  +Vector2D position
  +Vector2D direction
  +TransformComponent()
}

class StatisticsComponent {
  +stats std::map<std::string, StatType> 
  +StatisticsComponent()
}

class SpriteComponent {
  +setTex()
  +setAnimation()
  +Play()
  +initAnimations()
  +SDL_RenderCopyEx()
}

class ProjectileComponent {
  +Vector2D direction
  +SDL_Rect destRect
  +float speed
  +SDL_QueryTexture()
  +SDL_RenderCopyEx()
}

class KeyboardController {
  +SDL_Keycode upKey
  +int attackDuration
  +Uint32 attackStart
  +applyDirection()
  +attack()
  +changeDirection()
}

class IAControllerComponent {
  +Uint32 decisionStart
  +int direction
  +attack()
  +applyDirection()
}

class HealthComponent {
  +Uint32 deathStart
  +float health
  +updateHealth()
  +SDL_QueryTexture()
  +SDL_SetRenderDrawColor()
  +SDL_RenderFillRect()
  +SDL_RenderCopyEx()
}

class ColliderComponent {
  +collider SDL_Rect
  +tag std::string
  +SDL_SetRenderDrawColor()
  +SDL_RenderDrawRect()
}

' ===== Relations =====

GameManager *-- AssetManager
GameManager *-- CardsManager
GameManager *-- EntitiesManager
GameManager *-- SoundManager

Bonus *-- Entity
Component *-- Entity

Component <-- StatisticsComponent
Component <-- HealthComponent
Component <-- ColliderComponent
Component <-- TransformComponent
Component <-- UILabelComponent
Component <-- KeyboardController
KeyboardController <-- IAControllerComponent
Component <-- SpriteComponent
Component <-- ProjectileComponent

@enduml
